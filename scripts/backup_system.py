#!/usr/bin/env python3

# Script de Sistema de Backup - Gerenciador de Projetos e Personas
# Este script implementa um sistema de backup para configura√ß√µes e relat√≥rios,
# garantindo que os dados n√£o sejam perdidos em caso de falhas ou exclus√µes acidentais.

import os
import json
import shutil
import zipfile
from pathlib import Path
from datetime import datetime, timedelta

# Definir o diret√≥rio base do projeto
BASE_DIR = Path(__file__).parent.parent
BACKUP_DIR = BASE_DIR / "scripts" / "backups"
CONFIG_DIR = BASE_DIR / "scripts" / "personas"
STATE_DIR = BASE_DIR / "scripts" / "state"
REPORTS_DIR = BASE_DIR / "scripts" / "reports"
TASKS_DIR = BASE_DIR / "scripts" / "tasks"
LOGS_DIR = BASE_DIR / "scripts" / "logs"
BACKUP_LOG_FILE = LOGS_DIR / "backup.log"

# Configura√ß√µes de backup
MAX_BACKUPS = 10  # N√∫mero m√°ximo de backups a serem mantidos
BACKUP_FREQUENCY = timedelta(days=1)  # Frequ√™ncia padr√£o para backups autom√°ticos

# Fun√ß√£o para exibir mensagens formatadas
def print_header(message):
    print("=" * 61)
    print(message)
    print("=" * 61)

# Fun√ß√£o para verificar se um diret√≥rio existe e √© leg√≠vel
def check_directory(dir_path, description):
    if not dir_path.exists():
        print(f"‚ùå Problema: {description} n√£o encontrado em {dir_path}.")
        return False
    if not os.access(dir_path, os.R_OK):
        print(f"‚ùå Problema: {description} n√£o √© leg√≠vel em {dir_path}.")
        return False
    print(f"‚úÖ {description} encontrado e leg√≠vel em {dir_path}.")
    return True

# Fun√ß√£o para criar diret√≥rios necess√°rios se n√£o existirem
def setup_directories():
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    LOGS_DIR.mkdir(parents=True, exist_ok=True)
    if not BACKUP_LOG_FILE.exists():
        with open(BACKUP_LOG_FILE, 'w') as f:
            f.write(f"Log de Backup - Iniciado em {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("=" * 50 + "\n")

# Fun√ß√£o para registrar a√ß√£o no log
def log_action(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(BACKUP_LOG_FILE, 'a') as f:
        f.write(f"[{timestamp}] {message}\n")
    print(f"A√ß√£o registrada: {message}")

# Configurar diret√≥rios e arquivos necess√°rios
setup_directories()

# Fun√ß√£o para criar um arquivo zip de backup
def create_backup_zip(backup_name):
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_filename = f"backup_{backup_name}_{timestamp}.zip"
    backup_path = BACKUP_DIR / backup_filename
    
    with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Adicionar diret√≥rios ao backup
        for dir_to_backup, dir_name in [
            (CONFIG_DIR, "personas"),
            (STATE_DIR, "state"),
            (REPORTS_DIR, "reports"),
            (TASKS_DIR, "tasks")
        ]:
            if dir_to_backup.exists():
                for item in dir_to_backup.rglob('*'):
                    if item.is_file():
                        arcname = f"{dir_name}/{item.relative_to(dir_to_backup)}"
                        zipf.write(item, arcname)
                        print(f"Adicionado ao backup: {arcname}")
    
    log_action(f"Backup criado: {backup_filename}")
    print(f"Backup salvo em: {backup_path}")
    return backup_path

# Fun√ß√£o para gerenciar backups antigos (limitar ao n√∫mero m√°ximo)
def manage_old_backups():
    backups = sorted(BACKUP_DIR.glob("backup_*.zip"), key=os.path.getmtime)
    if len(backups) > MAX_BACKUPS:
        for old_backup in backups[:-MAX_BACKUPS]:
            try:
                old_backup.unlink()
                log_action(f"Backup antigo removido: {old_backup.name}")
                print(f"Backup antigo removido: {old_backup.name}")
            except Exception as e:
                log_action(f"Erro ao remover backup antigo {old_backup.name}: {e}")
                print(f"Erro ao remover backup antigo: {old_backup.name}")

# Fun√ß√£o para restaurar um backup
def restore_backup(backup_filename):
    backup_path = BACKUP_DIR / backup_filename
    if not backup_path.exists():
        print(f"Erro: Backup {backup_filename} n√£o encontrado em {BACKUP_DIR}.")
        return False
    
    restore_dir = BASE_DIR / "scripts" / "restored_backup"
    restore_dir.mkdir(parents=True, exist_ok=True)
    
    with zipfile.ZipFile(backup_path, 'r') as zipf:
        zipf.extractall(restore_dir)
    
    log_action(f"Backup restaurado: {backup_filename} para {restore_dir}")
    print(f"Backup restaurado em: {restore_dir}")
    print("Nota: Os arquivos restaurados est√£o em um diret√≥rio tempor√°rio. Mova manualmente para os locais apropriados se necess√°rio.")
    return True

# Iniciar sistema de backup
print_header("üíæ SISTEMA DE BACKUP")
print(f"Data/Hora Atual: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# Verificar diret√≥rios cr√≠ticos
dirs_to_check = [
    (CONFIG_DIR, "Diret√≥rio de Configura√ß√µes"),
    (STATE_DIR, "Diret√≥rio de Estado"),
    (REPORTS_DIR, "Diret√≥rio de Relat√≥rios"),
    (TASKS_DIR, "Diret√≥rio de Tarefas")
]

for dir_path, desc in dirs_to_check:
    check_directory(dir_path, desc)

# Criar um novo backup
print_header("üì¶ CRIANDO NOVO BACKUP")
backup_name = "system"
create_backup_zip(backup_name)

# Gerenciar backups antigos
print_header("üóëÔ∏è GERENCIANDO BACKUPS ANTIGOS")
manage_old_backups()

# Listar backups dispon√≠veis
print_header("üìã BACKUPS DISPON√çVEIS")
backups = sorted(BACKUP_DIR.glob("backup_*.zip"), key=os.path.getmtime, reverse=True)
if backups:
    for i, backup in enumerate(backups, 1):
        print(f"{i}. {backup.name} (Criado em: {datetime.fromtimestamp(backup.stat().st_mtime).strftime('%Y-%m-%d %H:%M:%S')})")
else:
    print("Nenhum backup encontrado.")

# Instru√ß√µes para restaura√ß√£o
print_header("‚ÑπÔ∏è COMO RESTAURAR UM BACKUP")
print("Para restaurar um backup, execute este script com o nome do arquivo de backup como argumento:")
print("  ./backup_system.py restore <nome_do_arquivo.zip>")
print("Exemplo:")
print(f"  ./backup_system.py restore {backups[0].name if backups else 'backup_system_YYYYMMDD_HHMMSS.zip'}")

# Verificar se h√° um argumento para restaura√ß√£o
import sys
if len(sys.argv) > 2 and sys.argv[1] == "restore":
    backup_to_restore = sys.argv[2]
    print_header(f"üîÑ RESTAURANDO BACKUP: {backup_to_restore}")
    restore_backup(backup_to_restore)
    exit(0)

# Resumo do backup
print_header("‚úÖ BACKUP CONCLU√çDO")
print(f"Log de Backup: {BACKUP_LOG_FILE}")
print(f"Diret√≥rio de Backups: {BACKUP_DIR}")
print(f"N√∫mero m√°ximo de backups mantidos: {MAX_BACKUPS}")

# Fim do script
exit(0)
