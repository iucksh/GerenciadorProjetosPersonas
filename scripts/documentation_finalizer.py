#!/usr/bin/env python3

# Script de Finaliza√ß√£o de Documenta√ß√£o - Gerenciador de Projetos e Personas
# Este script auxilia na finaliza√ß√£o da documenta√ß√£o do sistema, gerando ou atualizando
# tutoriais completos, FAQs e exemplos detalhados para garantir que os usu√°rios tenham
# todas as informa√ß√µes necess√°rias para usar o sistema.

import os
import json
from pathlib import Path
from datetime import datetime

# Definir o diret√≥rio base do projeto
BASE_DIR = Path(__file__).parent.parent
DOCS_DIR = BASE_DIR / "docs"
TUTORIALS_DIR = DOCS_DIR / "tutorials"
FAQS_DIR = DOCS_DIR / "faqs"
EXAMPLES_DIR = BASE_DIR / "examples"
LOGS_DIR = BASE_DIR / "scripts" / "logs"
DOC_LOG_FILE = LOGS_DIR / "documentation_finalizer.log"

# Fun√ß√£o para exibir mensagens formatadas
def print_header(message):
    print("=" * 61)
    print(message)
    print("=" * 61)

# Fun√ß√£o para registrar a√ß√£o no log
def log_action(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(DOC_LOG_FILE, 'a') as f:
        f.write(f"[{timestamp}] {message}\n")
    print(f"A√ß√£o registrada: {message}")

# Configurar diret√≥rios e arquivos necess√°rios
LOGS_DIR.mkdir(parents=True, exist_ok=True)
if not DOC_LOG_FILE.exists():
    with open(DOC_LOG_FILE, 'w') as f:
        f.write(f"Log de Finaliza√ß√£o de Documenta√ß√£o - Iniciado em {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 50 + "\n")

# Criar diret√≥rios de documenta√ß√£o se n√£o existirem
TUTORIALS_DIR.mkdir(parents=True, exist_ok=True)
FAQS_DIR.mkdir(parents=True, exist_ok=True)
EXAMPLES_DIR.mkdir(parents=True, exist_ok=True)

# Fun√ß√£o para criar ou atualizar um arquivo de tutorial
def create_tutorial(filename, title, content):
    tutorial_path = TUTORIALS_DIR / filename
    with open(tutorial_path, 'w', encoding='utf-8') as f:
        f.write(f"# {title}\n\n")
        f.write(f"√öltima atualiza√ß√£o: {datetime.now().strftime('%Y-%m-%d')}\n\n")
        f.write(content)
    log_action(f"Tutorial criado ou atualizado: {filename}")
    print(f"Tutorial salvo em: {tutorial_path}")

# Fun√ß√£o para criar ou atualizar o arquivo de FAQs
def create_faqs(filename, title, faqs_content):
    faqs_path = FAQS_DIR / filename
    with open(faqs_path, 'w', encoding='utf-8') as f:
        f.write(f"# {title}\n\n")
        f.write(f"√öltima atualiza√ß√£o: {datetime.now().strftime('%Y-%m-%d')}\n\n")
        f.write(faqs_content)
    log_action(f"FAQs criados ou atualizados: {filename}")
    print(f"FAQs salvos em: {faqs_path}")

# Fun√ß√£o para criar um exemplo de projeto
def create_example_project(project_name, description, config_data, tasks_data):
    project_dir = EXAMPLES_DIR / project_name
    project_dir.mkdir(parents=True, exist_ok=True)
    
    # Criar README.md para o exemplo
    with open(project_dir / "README.md", 'w', encoding='utf-8') as f:
        f.write(f"# Exemplo de Projeto: {project_name}\n\n")
        f.write(f"Descri√ß√£o: {description}\n\n")
        f.write("Este diret√≥rio cont√©m um exemplo de configura√ß√£o para o Gerenciador de Projetos e Personas.\n")
        f.write("Use como refer√™ncia para configurar seu pr√≥prio projeto.\n")
    
    # Criar arquivo de configura√ß√£o
    with open(project_dir / "config.json", 'w', encoding='utf-8') as f:
        json.dump(config_data, f, indent=2)
    
    # Criar arquivo de tarefas
    with open(project_dir / "tasks.json", 'w', encoding='utf-8') as f:
        json.dump(tasks_data, f, indent=2)
    
    # Criar diret√≥rio de relat√≥rios
    reports_dir = project_dir / "reports"
    reports_dir.mkdir(parents=True, exist_ok=True)
    
    log_action(f"Exemplo de projeto criado: {project_name}")
    print(f"Exemplo de projeto salvo em: {project_dir}")

# Iniciar finaliza√ß√£o da documenta√ß√£o
print_header("üìö FINALIZA√á√ÉO DA DOCUMENTA√á√ÉO")
print(f"Data/Hora Atual: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# Criar tutoriais
print_header("üìñ CRIANDO TUTORIAIS")
tutorial_content_1 = """
## Introdu√ß√£o

Este tutorial guia voc√™ pelos passos b√°sicos para configurar e usar o Gerenciador de Projetos e Personas.

### Passo 1: Instala√ß√£o

1. Clone o reposit√≥rio ou baixe os arquivos do projeto.
2. Certifique-se de ter o Python 3 instalado em seu sistema.
3. Execute os scripts de instala√ß√£o, se houver, ou siga as instru√ß√µes em INSTALACAO.md.

### Passo 2: Configura√ß√£o de Personas

1. Edite o arquivo `scripts/personas/config.json` para definir as personas do seu projeto.
2. Cada persona deve ter um nome, fun√ß√£o e prioridade.

### Passo 3: Iniciar o Sistema

1. Execute o script `monitor.py` para verificar o status inicial do sistema:
   ```
   python scripts/monitor.py
   ```
2. Use o script `rotate_personas.py` para alternar entre personas:
   ```
   python scripts/rotate_personas.py
   ```

### Passo 4: Gerenciamento de Tarefas

1. Adicione tarefas usando o script `task_manager.py`:
   ```
   python scripts/task_manager.py add "Desenvolver nova funcionalidade" P0
   ```
2. Atualize o status das tarefas conforme o progresso:
   ```
   python scripts/task_manager.py update 1 "Em Progresso"
   ```

### Passo 5: Gera√ß√£o de Relat√≥rios

1. Gere relat√≥rios de progresso para as personas ativas:
   ```
   python scripts/generate_report.py
   ```
2. Atualize campos espec√≠ficos nos relat√≥rios:
   ```
   python scripts/update_report.py Carla progress "Conclu√≠ a an√°lise de requisitos."
   ```

## Dicas

- Execute o script de monitoramento regularmente para verificar se √© necess√°rio rotacionar personas ou gerar relat√≥rios.
- Use o script de status do projeto para ter uma vis√£o geral do progresso:
  ```
  python scripts/project_status.py
  ```

## Pr√≥ximos Passos

Depois de configurar o sistema b√°sico, explore funcionalidades avan√ßadas como integra√ß√£o com Git e backups autom√°ticos.
"""

create_tutorial("tutorial_basico.md", "Tutorial B√°sico: Configura√ß√£o e Uso do Sistema", tutorial_content_1)

tutorial_content_2 = """
## Introdu√ß√£o

Este tutorial aborda funcionalidades avan√ßadas do Gerenciador de Projetos e Personas, como integra√ß√£o com controle de vers√£o e backups.

### Integra√ß√£o com Git

1. Certifique-se de que o Git est√° instalado e que seu diret√≥rio de projeto √© um reposit√≥rio Git.
2. Execute o script de integra√ß√£o para commitar relat√≥rios com autoria das personas:
   ```
   python scripts/git_integration.py
   ```
3. Verifique o hist√≥rico de commits para ver os relat√≥rios commitados:
   ```
   git log --author="Nome da Persona"
   ```

### Sistema de Backup

1. Execute o script de backup para salvar configura√ß√µes e relat√≥rios:
   ```
   python scripts/backup_system.py
   ```
2. Para restaurar um backup, use:
   ```
   python scripts/backup_system.py restore backup_system_YYYYMMDD_HHMMSS.zip
   ```

### Notifica√ß√µes

1. Configure notifica√ß√µes para alertar sobre rota√ß√£o de personas ou relat√≥rios pendentes:
   ```
   python scripts/notify.py
   ```

### Testes de Automa√ß√£o

1. Execute os casos de teste para verificar o funcionamento dos scripts:
   ```
   python scripts/test_automation.py
   ```

## Dicas Avan√ßadas

- Automatize backups e notifica√ß√µes usando cron jobs ou tarefas agendadas no Windows.
- Use o script de diagn√≥stico para identificar problemas no sistema:
  ```
  python scripts/diagnostics.py
  ```

## Personaliza√ß√£o

Adapte os scripts conforme necess√°rio para atender √†s necessidades espec√≠ficas do seu projeto. Por exemplo, modifique os intervalos de rota√ß√£o no arquivo de configura√ß√£o.
"""

create_tutorial("tutorial_avancado.md", "Tutorial Avan√ßado: Integra√ß√µes e Funcionalidades", tutorial_content_2)

# Criar FAQs
print_header("‚ùì CRIANDO FAQs")
faqs_content = """
## Perguntas Frequentes (FAQs)

### 1. O que √© o Gerenciador de Projetos e Personas?

√â um sistema para gerenciar projetos e personas, automatizando tarefas como rota√ß√£o de personas, gera√ß√£o de relat√≥rios e rastreamento de progresso.

### 2. Como configuro as personas para meu projeto?

Edite o arquivo `scripts/personas/config.json` e adicione as personas com seus respectivos nomes, fun√ß√µes e prioridades. Veja o exemplo fornecido para refer√™ncia.

### 3. Como alterno entre personas durante o desenvolvimento?

Execute o script `rotate_personas.py` para alternar automaticamente entre personas com base nos intervalos configurados:
```
python scripts/rotate_personas.py
```

### 4. Como gero relat√≥rios de progresso?

Use o script `generate_report.py` para criar relat√≥rios para todas as personas ativas:
```
python scripts/generate_report.py
```

### 5. Posso integrar este sistema com ferramentas de controle de vers√£o como Git?

Sim, use o script `git_integration.py` para commitar relat√≥rios automaticamente com autoria das personas:
```
python scripts/git_integration.py
```

### 6. Como fa√ßo backup dos dados do sistema?

Execute o script `backup_system.py` para criar um backup de configura√ß√µes e relat√≥rios:
```
python scripts/backup_system.py
```

### 7. O que fa√ßo se encontrar um problema no sistema?

Execute o script de diagn√≥stico para identificar poss√≠veis problemas:
```
python scripts/diagnostics.py
```
Entre em contato com a equipe de suporte ou abra uma issue no reposit√≥rio do projeto.

### 8. Como testo se os scripts est√£o funcionando corretamente?

Use o script de testes de automa√ß√£o para verificar o funcionamento dos scripts principais:
```
python scripts/test_automation.py
```

### 9. Posso personalizar os intervalos de rota√ß√£o e gera√ß√£o de relat√≥rios?

Sim, edite os par√¢metros no arquivo de configura√ß√£o `scripts/personas/config.json` para ajustar os intervalos conforme necess√°rio.

### 10. Onde encontro exemplos de uso do sistema?

Consulte o diret√≥rio `examples/` para ver projetos de exemplo com configura√ß√µes e relat√≥rios. Use-os como refer√™ncia para configurar seu pr√≥prio projeto.
"""

create_faqs("faqs.md", "Perguntas Frequentes sobre o Gerenciador de Projetos e Personas", faqs_content)

# Criar exemplos de projetos
print_header("üìÇ CRIANDO EXEMPLOS DE PROJETOS")
example_config = {
    "personas": [
        {"name": "Alice", "role": "Gerente de Produto", "priority": "P0"},
        {"name": "Bob", "role": "Desenvolvedor Frontend", "priority": "P0"},
        {"name": "Charlie", "role": "Desenvolvedor Backend", "priority": "P1"}
    ],
    "rotation_interval": 900,
    "report_interval": 1800,
    "active_count": 2
}

example_tasks = {
    "tasks": [
        {"id": 1, "description": "Definir requisitos do projeto", "priority": "P0", "status": "Conclu√≠do", "assigned_to": "Alice"},
        {"id": 2, "description": "Desenvolver interface do usu√°rio", "priority": "P0", "status": "Em Progresso", "assigned_to": "Bob"},
        {"id": 3, "description": "Implementar API backend", "priority": "P1", "status": "Pendente", "assigned_to": "Charlie"}
    ]
}

create_example_project("projeto_exemplo_web", "Exemplo de um projeto de desenvolvimento web", example_config, example_tasks)

# Resumo da finaliza√ß√£o da documenta√ß√£o
print_header("‚úÖ DOCUMENTA√á√ÉO FINALIZADA")
print(f"Tutoriais criados em: {TUTORIALS_DIR}")
print(f"FAQs criados em: {FAQS_DIR}")
print(f"Exemplos de projetos criados em: {EXAMPLES_DIR}")
print(f"Log de Documenta√ß√£o: {DOC_LOG_FILE}")

# Instru√ß√µes para pr√≥ximos passos
print_header("üìã PR√ìXIMOS PASSOS")
print("1. Revise os tutoriais e FAQs gerados para adicionar detalhes espec√≠ficos do seu projeto.")
print("2. Adicione mais exemplos de projetos no diret√≥rio 'examples/' conforme necess√°rio.")
print("3. Publique a documenta√ß√£o atualizada junto com a vers√£o est√°vel do sistema.")

# Fim do script
log_action("Finaliza√ß√£o da documenta√ß√£o conclu√≠da.")
exit(0)
