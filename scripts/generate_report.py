#!/usr/bin/env python3

# Script de Gera√ß√£o de Relat√≥rios - Gerenciador de Projetos e Personas
# Este script gera relat√≥rios de progresso para as personas ativas,
# salvando-os no diret√≥rio de relat√≥rios com a data atual.

import os
import json
import time
from pathlib import Path
from datetime import datetime

# Definir o diret√≥rio base do projeto
BASE_DIR = Path(__file__).parent.parent
CONFIG_FILE = BASE_DIR / "scripts" / "personas" / "config.json"
STATE_FILE = BASE_DIR / "scripts" / "state" / "agent_state.json"
REPORTS_DIR = BASE_DIR / "scripts" / "reports"
TEMPLATE_FILE = BASE_DIR / "scripts" / "report_template.md"

# Fun√ß√£o para exibir mensagens formatadas
def print_header(message):
    print("=" * 61)
    print(message)
    print("=" * 61)

# Fun√ß√£o para verificar se um arquivo existe e √© leg√≠vel
def check_file(file_path):
    if not file_path.exists() or not os.access(file_path, os.R_OK):
        print(f"Erro: Arquivo {file_path} n√£o encontrado ou n√£o √© leg√≠vel.")
        exit(1)

# Fun√ß√£o para criar diret√≥rios necess√°rios se n√£o existirem
def setup_directories():
    REPORTS_DIR.mkdir(parents=True, exist_ok=True)
    STATE_DIR = BASE_DIR / "scripts" / "state"
    STATE_DIR.mkdir(parents=True, exist_ok=True)
    if not STATE_FILE.exists():
        with open(STATE_FILE, 'w') as f:
            json.dump({"active_personas": [], "last_rotation": 0, "last_report": 0}, f)
    # Criar subdiret√≥rios para cada persona
    with open(CONFIG_FILE, 'r') as f:
        config_data = json.load(f)
        for persona in config_data["personas"]:
            persona_dir = REPORTS_DIR / persona["name"]
            persona_dir.mkdir(parents=True, exist_ok=True)

# Verificar se os arquivos de configura√ß√£o e estado existem
check_file(CONFIG_FILE)
setup_directories()
check_file(STATE_FILE)

# Ler estado atual
with open(STATE_FILE, 'r') as f:
    state_data = json.load(f)
    ACTIVE_PERSONAS = state_data["active_personas"]
    LAST_REPORT = state_data["last_report"]

# Ler intervalo de relat√≥rios do arquivo de configura√ß√£o
with open(CONFIG_FILE, 'r') as f:
    config_data = json.load(f)
    REPORT_INTERVAL = config_data["report_interval"]

CURRENT_TIME = int(time.time())

# Calcular tempo desde o √∫ltimo relat√≥rio
TIME_SINCE_REPORT = CURRENT_TIME - LAST_REPORT

# Verificar se a gera√ß√£o de relat√≥rios √© necess√°ria
if TIME_SINCE_REPORT < REPORT_INTERVAL:
    print_header("‚è≥ GERA√á√ÉO DE RELAT√ìRIOS N√ÉO NECESS√ÅRIA")
    print(f"Tempo desde o √∫ltimo relat√≥rio: {TIME_SINCE_REPORT} segundos.")
    print(f"Intervalo configurado: {REPORT_INTERVAL} segundos.")
    print("Gera√ß√£o de relat√≥rios n√£o √© necess√°ria no momento.")
    exit(0)

# Verificar se h√° personas ativas
if not ACTIVE_PERSONAS:
    print_header("‚ö†Ô∏è NENHUMA PERSONA ATIVA")
    print("N√£o h√° personas ativas para gerar relat√≥rios.")
    print("Execute 'python scripts/rotate_personas.py' para ativar novas personas.")
    exit(0)

# Criar ou usar um modelo de relat√≥rio b√°sico se o arquivo de template n√£o existir
if not TEMPLATE_FILE.exists():
    with open(TEMPLATE_FILE, 'w') as f:
        f.write("""# Relat√≥rio de Progresso - {PERSONA_NAME}
**Data:** {DATE}

## Progresso Recente
- Ainda n√£o atualizado.

## Pr√≥ximos Passos
- Ainda n√£o atualizado.

## Bloqueadores
- Ainda n√£o atualizado.

## Notas
- Este √© um relat√≥rio gerado automaticamente. Atualize os campos conforme necess√°rio.
""")

# Obter a data atual para o nome do arquivo e conte√∫do do relat√≥rio
CURRENT_DATE = datetime.now().strftime("%Y-%m-%d")
REPORT_COUNT = 0

# Ler o conte√∫do do template
with open(TEMPLATE_FILE, 'r') as f:
    template_content = f.read()

# Gerar relat√≥rio para cada persona ativa
for persona_name in ACTIVE_PERSONAS:
    REPORT_FILE = REPORTS_DIR / persona_name / f"report_{CURRENT_DATE}.md"
    
    # Verificar se o relat√≥rio j√° existe para evitar sobrescrever
    if REPORT_FILE.exists():
        print(f"Relat√≥rio para {persona_name} j√° existe para a data {CURRENT_DATE}. Pulando...")
    else:
        # Substituir placeholders no template
        report_content = template_content.replace("{PERSONA_NAME}", persona_name).replace("{DATE}", CURRENT_DATE)
        with open(REPORT_FILE, 'w') as f:
            f.write(report_content)
        print(f"Relat√≥rio gerado para {persona_name} em {REPORT_FILE}.")
        REPORT_COUNT += 1

# Atualizar o estado com o timestamp do √∫ltimo relat√≥rio
state_data["last_report"] = CURRENT_TIME
with open(STATE_FILE, 'w') as f:
    json.dump(state_data, f)

# Exibir resultado da gera√ß√£o de relat√≥rios
print_header("üìù RELAT√ìRIOS GERADOS")
print(f"N√∫mero de relat√≥rios gerados ou verificados: {REPORT_COUNT}")
print(f"√öltimo relat√≥rio atualizado para: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(CURRENT_TIME))}")
print(f"Os relat√≥rios est√£o dispon√≠veis no diret√≥rio '{REPORTS_DIR}'.")
print("Para atualizar campos espec√≠ficos, use 'python scripts/update_report.py <persona> <campo> <conte√∫do>'.")
print("Para mais detalhes, consulte os fluxos de trabalho em 'docs/FLUXOS.md'.")

# Fim do script
exit(0)
